basePath: /api/v1
definitions:
  echo.HTTPError:
    properties:
      message: {}
    type: object
  models.PaginatedUsers:
    properties:
      currentPage:
        type: integer
      hasMore:
        type: boolean
      size:
        type: integer
      totalCount:
        description: TotalCount is the number of elements that has the db
        type: integer
      totalPages:
        description: TotalPages is the number of pages based on the total count
        type: integer
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.User:
    properties:
      country:
        example: DE
        type: string
      createdAt:
        example: "2016-05-18T16:00:00Z"
        type: string
      email:
        example: atingo@example.com
        type: string
      firstName:
        example: Alice
        type: string
      id:
        example: ddd50d89-0cf4-4d35-b8e8-51a2b5a06ce4
        type: string
      lastName:
        example: Tingo
        type: string
      nickname:
        example: atingo
        type: string
      password:
        description: Should be json:"-" in order to hide the password
        type: string
      updatedAt:
        example: "2016-05-18T16:00:00Z"
        type: string
    required:
    - country
    - email
    - firstName
    - lastName
    - nickname
    type: object
info:
  contact: {}
  description: Users Microservices
  title: Users Microservices
  version: "1.0"
paths:
  /users:
    get:
      description: Gets a paginated users list from the db and returns it
      parameters:
      - default: 1
        description: Page to retrieve
        example: 2
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Page size
        example: 3
        in: query
        minimum: 1
        name: size
        type: integer
      - description: FirstName filter
        example: Alice
        in: query
        name: firstName
        type: string
      - description: LastName filter
        example: Tingo
        in: query
        name: lastName
        type: string
      - description: Email filter
        example: alicetingo@example.com
        format: email
        in: query
        name: email
        type: string
      - description: Nickname filter
        example: atingo
        in: query
        name: nickname
        type: string
      - description: Country filter
        example: DE
        in: query
        name: country
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginatedUsers'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Gets paginated users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Creates a new user and inserts it in the DB
      parameters:
      - description: User to create
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Create a user
      tags:
      - Users
  /users/{userId}:
    delete:
      consumes:
      - application/json
      description: Deletes a user by its id from the DB
      parameters:
      - description: User id
        example: 5cace01f-45c3-49f0-a725-c22866874095
        format: uuid
        in: path
        name: userId
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Deletes a user
      tags:
      - Users
    get:
      description: Gets a user by its id from the DB and returns it
      parameters:
      - description: User id
        example: ddd50d89-0cf4-4d35-b8e8-51a2b5a06ce4
        format: uuid
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Gets a user
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Updates a user by its id with the given body data
      parameters:
      - description: User id
        example: 7f598128-fb35-4ced-b80f-c5b5f66bd583
        format: uuid
        in: path
        name: userId
        required: true
        type: string
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Updates a user
      tags:
      - Users
swagger: "2.0"
